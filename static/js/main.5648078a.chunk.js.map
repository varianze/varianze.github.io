{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["INDICATORS","profitability","name","makePlotData","data","date","map","dat","annualNetIncome","annualTotalRevenue","x","y","type","yaxis","makeGrowthRate","v","makePlotLayout","title","xaxis","rangeslider","yaxis2","overlaying","side","manageEff","annualTotalAssets","perShareStats","debtToEq","currentRatio","payoutRatio","PLOT_STYLE","width","height","values","val","i","SYMBOLS","Array","from","Set","SYMBOLS_raw","INDICATOR_keys","Object","keys","App","useState","symbol","setSymbol","report","setReport","useEffect","fetch","then","res","text","csvString","d3","className","value","onChange","evt","target","key","indicator","layout","useResizeHandler","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5648078a.chunk.js","sourcesContent":["export const INDICATORS = {\n    profitability: {\n        name: 'Profitability',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const annualNetIncome = data.map(dat => dat['annualNetIncome']);\n            const annualTotalRevenue = data.map(dat => dat['annualTotalRevenue']);\n            const profitMargin = data.map(dat => dat['annualNetIncome'] / dat['annualTotalRevenue'] * 100);\n            const revenueGrowth = makeGrowthRate(annualTotalRevenue).map(v => 100 * v);\n            const incomeGrowth = makeGrowthRate(annualNetIncome).map(v => 100 * v);\n            return [\n                { x: date, y: annualNetIncome, name: 'Net Income', type: 'bar', },\n                { x: date, y: annualTotalRevenue, name: 'Total Revenue', type: 'bar', },\n                { x: date, y: profitMargin, name: 'Profit Margin', yaxis: 'y2', },\n                { x: date, y: revenueGrowth, name: 'Revenue Growth', yaxis: 'y2', },\n                { x: date, y: incomeGrowth, name: 'Income Growth', yaxis: 'y2', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Profitability',\n                xaxis: {rangeslider: true,},\n                yaxis2: { overlaying: 'y', side: 'right' },\n            }\n        },\n    },\n    manageEff: {\n        name: 'Management Efficiency',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const annualNetIncome = data.map(dat => dat['annualNetIncome']);\n            const annualTotalAssets = data.map(dat => dat['annualTotalAssets']);\n            const annualStockholdersEquity = data.map(dat => dat['annualStockholdersEquity']);\n            const roa = data.map(dat => dat['annualNetIncome'] / dat['annualTotalAssets'] * 100);\n            const roe = data.map(dat => dat['annualNetIncome'] / dat['annualStockholdersEquity'] * 100);\n            return [\n                { x: date, y: annualNetIncome, name: 'Net Income', type: 'bar', },\n                { x: date, y: annualStockholdersEquity, name: 'Stockholders Equity', type: 'bar', },\n                { x: date, y: annualTotalAssets, name: 'Total Assets', type: 'bar', },\n                { x: date, y: roa, name: 'ROA', yaxis: 'y2', },\n                { x: date, y: roe, name: 'ROE', yaxis: 'y2', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Return On Assets',\n                xaxis: {rangeslider: true,},\n                yaxis2: { overlaying: 'y', side: 'right' },\n            }\n        },\n    },\n    perShareStats: {\n        name: 'Per Share Stats',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const annualDilutedEPS = data.map(dat => dat['annualDilutedEPS']);\n            const totalCashPerShare = data.map(dat => (dat['annualCashAndCashEquivalents'] + dat['annualOtherShortTermInvestments']) / (dat['annualNetIncome'] / dat['annualBasicEPS']));\n            const bookValuePerShare = data.map(dat => dat['annualStockholdersEquity'] / (dat['annualNetIncome'] / dat['annualBasicEPS']));\n            return [\n                { x: date, y: annualDilutedEPS, name: 'Diluted EPS', },\n                { x: date, y: totalCashPerShare, name: 'Total Cash Per Share', },\n                { x: date, y: bookValuePerShare, name: 'Book Value Per Share', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Per Share Stats',\n                xaxis: {rangeslider: true,},\n            }\n        },\n    },\n    debtToEq: {\n        name: 'Debt to Equity Ratio',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const totalLiab = data.map(dat => dat['annualTotalLiabilitiesNetMinorityInterest']);\n            const totalEq = data.map(dat => dat['annualStockholdersEquity']);\n            const d2e = data.map(dat => dat['annualTotalLiabilitiesNetMinorityInterest'] / dat['annualStockholdersEquity']);\n            return [\n                { x: date, y: totalLiab, name: 'Total Liabilities', type: 'bar', },\n                { x: date, y: totalEq, name: \"Total Shareholders' Equity\", type: 'bar', },\n                { x: date, y: d2e, name: 'Debt to Equity Ratio', yaxis: 'y2', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Debt to Equity Ratio',\n                xaxis: {rangeslider: true,},\n                yaxis2: { overlaying: 'y', side: 'right' },\n            }\n        },\n    },\n    currentRatio: {\n        name: 'Current Ratio',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const currentAsset = data.map(dat => dat['annualCurrentAssets']);\n            const ccurrentLiabilities = data.map(dat => dat['annualCurrentLiabilities']);\n            const ratio = data.map(dat => dat['annualCurrentAssets'] / dat['annualCurrentLiabilities']);\n            return [\n                { x: date, y: currentAsset, name: 'Current Assets ', type: 'bar', },\n                { x: date, y: ccurrentLiabilities, name: \"Current Liabilities\", type: 'bar', },\n                { x: date, y: ratio, name: 'Current Ratio', yaxis: 'y2', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Current Ratio',\n                xaxis: {rangeslider: true,},\n                yaxis2: { overlaying: 'y', side: 'right' },\n            }\n        },\n    },\n    payoutRatio: {\n        name: 'Payout Ratio',\n        makePlotData: data => {\n            const date = data.map(dat => dat['date']);\n            const dividend = data.map(dat => -1 * dat['annualCashDividendsPaid']);\n            const income = data.map(dat => dat['annualNetIncome']);\n            const ratio = data.map(dat => -100 * dat['annualCashDividendsPaid'] / dat['annualNetIncome']);\n            return [\n                { x: date, y: dividend, name: 'Dividends Paid', type: 'bar', },\n                { x: date, y: income, name: \"Net Income\", type: 'bar', },\n                { x: date, y: ratio, name: 'Payout Ratio', yaxis: 'y2', },\n            ];\n        },\n        makePlotLayout: () => {\n            return {\n                title: 'Payout Ratio',\n                xaxis: {rangeslider: true,},\n                yaxis2: { overlaying: 'y', side: 'right' },\n            }\n        },\n    }\n}\n\nexport const PLOT_STYLE = {width: '100%', height: '100%'}\n\nfunction makeGrowthRate(values) {\n    return values.map((val, i) => {\n        if (i === 0) {\n            return;\n        }\n        return (val - values[i - 1]) / values[i - 1];\n    })\n}","import React, {useState, useEffect} from 'react';\nimport Plot from 'react-plotly.js';\nimport * as d3 from 'd3';\nimport { INDICATORS, PLOT_STYLE } from './constants';\nimport SYMBOLS_raw from \"./symbols.json\";\n\nconst SYMBOLS = Array.from(new Set(SYMBOLS_raw));\nconst INDICATOR_keys = Object.keys(INDICATORS);\n\nfunction App() {\n  const [symbol, setSymbol] = useState('AAPL');\n  const [report, setReport] = useState(null);\n\n  useEffect(() => {\n    fetch(`/reports/${symbol}.csv`).then(res => res.text())\n      .then(csvString => {\n        const data = d3.csvParse(csvString, d3.autoType);\n        setReport(data);\n      })\n  }, [symbol])\n\n  return (\n    <div className=\"container-fluid\">\n      <select value={symbol} onChange={evt => setSymbol(evt.target.value)}>\n        {SYMBOLS.map(symbol => <option key={symbol}>{symbol}</option>)}\n      </select>\n\n      <div className=\"row\">\n        {INDICATOR_keys.map(key => {\n          const indicator = INDICATORS[key];\n          return <div className=\"col-12 col-md-6 p-0\">\n            <Plot\n              data={indicator.makePlotData(report || [])}\n              layout={indicator.makePlotLayout()}\n              useResizeHandler={true}\n              style={PLOT_STYLE}\n            />\n          </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}