{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SYMBOLS","SYMBOLS_raw","filter","sym","includes","App","fileInput","useState","symbol","setSymbol","reportBySymbol","setReportBySymbol","priceBySymbol","setPriceBySymbol","priceFrom","setPriceFrom","priceTo","setPriceTo","updatePriceBySymbol","useCallback","csvString","data","d3","prevState","years","Array","from","Set","map","p","moment","year","slice","length","useEffect","fetch","then","res","text","axios","get","catch","error","sector","useMemo","result","Object","keys","symbolsBySector","some","sec","report","price","selectedPrices","dat","className","Autocomplete","options","renderInput","params","TextField","label","variant","value","onChange","_","val","FormControl","Select","e","target","MenuItem","key","x","type","useResizeHandler","style","width","height","layout","autosize","legend","title","display","ref","node","f","files","r","FileReader","onload","contents","readAsText","alert","accept","onClick","click","y","RatioPlot","key1","name1","key2","name2","name","factor","y2range","key1factor","dates","yaxis","yaxis2","overlaying","side","range","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4f09ddaf.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from \"react\";\nimport * as d3 from 'd3';\nimport Plot from 'react-plotly.js';\nimport moment from \"moment\";\nimport SYMBOLS_raw from \"./symbols.json\";\nimport symbolsBySector from \"./symbolsBySector.json\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport axios from 'axios';\n\nconst SYMBOLS = SYMBOLS_raw.filter(sym => !sym.includes(\".\"))\n\nfunction App() {\n    const [symbol, setSymbol] = useState('MSFT');\n    const [reportBySymbol, setReportBySymbol] = useState({});\n    const [priceBySymbol, setPriceBySymbol] = useState({});\n    const [priceFrom, setPriceFrom] = useState('')\n    const [priceTo, setPriceTo] = useState('')\n    let fileInput;\n\n    const updatePriceBySymbol = useCallback(csvString => {\n        let data = d3.csvParse(csvString, d3.autoType);\n        setPriceBySymbol(prevState => ({ ...prevState, [symbol]: data }));\n        const years = Array.from((new Set(data.map(p => moment(p['Date']).year()))))\n        setPriceFrom(years[0])\n        setPriceTo(years.slice(years.length - 1)[0])\n    }, [symbol]);\n\n    useEffect(() => {\n        if (typeof reportBySymbol[symbol] === 'undefined') {\n            fetch(`reports/${symbol}.csv`)\n            .then(res => res.text())\n            .then(csvString => {\n                let data = d3.csvParse(csvString, d3.autoType);\n                setReportBySymbol(prevState => ({ ...prevState, [symbol]: data }));\n            });\n        }\n        if (typeof priceBySymbol[symbol] === 'undefined') {\n            axios.get(`prices/${symbol}.csv`)\n                .then(res => updatePriceBySymbol(res.data))\n                .catch(error => {\n                    return;\n                });\n        }\n    }, [symbol, reportBySymbol, priceBySymbol, updatePriceBySymbol]);\n\n    const sector = useMemo(() => {\n        let result;\n        Object.keys(symbolsBySector).some(sec => {\n            if (symbolsBySector[sec].includes(symbol)) {\n                result = sec;\n                return true;\n            }\n            return false;\n        })\n        return result;\n    }, [symbol]);\n\n    const report = reportBySymbol[symbol];\n    const price = priceBySymbol[symbol] || [];\n    const years = useMemo(() => Array.from(\n            new Set(price\n                .map(p => moment(p['Date']).year())\n            )\n        ),\n        [price]\n    );\n    const selectedPrices = useMemo(() => price\n        .filter(dat => moment(dat['Date']).year() >= priceFrom && moment(dat['Date']).year() <= priceTo)\n        .map(dat => dat['Adj Close'])\n    , [price, priceFrom, priceTo]);\n\n    return <div className=\"container mt-3\">\n        <Autocomplete\n            className=\"mb-3\"\n            options={SYMBOLS}\n            renderInput={(params) => <TextField {...params} label=\"Symbol\" variant=\"outlined\" />}\n            value={symbol}\n            onChange={(_, val) => setSymbol(val)}\n        />\n        <h3><span className=\"badge badge-secondary\">{sector}</span></h3>\n        {\n            price ?\n            <div className=\"d-flex align-items-center\">\n                <span className=\"mr-1\">Prices From</span>\n                <FormControl variant='outlined'>\n                    <Select value={priceFrom} onChange={e => setPriceFrom(e.target.value)}>\n                        {years.map(year => <MenuItem key={year} value={year}>{year}</MenuItem>)}\n                    </Select>\n                </FormControl>\n                <span className=\"ml-2 mr-1\">To</span>\n                <FormControl variant='outlined'>\n                    <Select value={priceTo} onChange={e => setPriceTo(e.target.value)}>\n                        {years.map(year => <MenuItem key={year} value={year}>{year}</MenuItem>)}\n                    </Select>\n                </FormControl>\n                <span className=\"ml-2\">({selectedPrices.length} Trading Days)</span>\n            </div> :\n            <p>Loading...</p>\n        }\n        {report ? <>\n            {price.length ?\n                <Plot\n                    data={[\n                        {\n                            x: selectedPrices,\n                            type: 'histogram'\n                        }\n                    ]}\n                    useResizeHandler\n                    style={{ width: '100%', height: '100%' }}\n                    layout={{ autosize: true, legend: { \"orientation\": \"h\" },\n                        title: 'Price Distribution' }}\n                /> :\n                <div className=\"mt-5 mb-5 text-center\">\n                    <p>Price Data not available yet</p>\n                    <input type=\"file\" style={{display: 'none'}} ref={node => fileInput = node}\n                        onChange={(e) => {\n                            const f = e.target.files[0];\n                            if (f) {\n                                var r = new FileReader();\n                                r.onload = function(e) {\n                                    var contents = e.target.result;\n                                    updatePriceBySymbol(contents);\n                               }\n                                r.readAsText(f);\n                              } else {\n                                alert(\"Failed to load file\");\n                              }\n                        }}\n                        value=''\n                        accept='text/csv'\n                    />\n                    <button className=\"btn btn-secondary\" onClick={() => fileInput.click()}>\n                        Upload Csv to Visualize\n                    </button>\n                </div>}\n            <Plot\n                data={[{\n                    x: report.map(dat => moment(dat['date']).year()),\n                    y: report.map(dat => dat['annualFreeCashFlow']),\n                }]}\n                useResizeHandler\n                style={{ width: '100%', height: '100%' }}\n                layout={{ autosize: true, title: 'Free Cash Flow' }}\n            />\n            <RatioPlot\n                report={report}\n                title=\"Profit Margin\"\n                key1=\"annualNetIncome\"\n                name1=\"Net Income\"\n                key2=\"annualTotalRevenue\"\n                name2=\"Total Revenue\"\n            />\n            <Plot\n                data={[\n                    {\n                        x: report.map(dat => moment(dat['date']).year()),\n                        y: report.map(dat => dat['annualStockholdersEquity']),\n                        type: 'bar',\n                        name: 'annualStockholdersEquity',\n                    },\n                    {\n                        x: report.map(dat => moment(dat['date']).year()),\n                        y: report.map(dat => dat['annualTotalLiabilitiesNetMinorityInterest']),\n                        type: 'bar',\n                        name: 'annualTotalLiabilitiesNetMinorityInterest',\n                    },\n                    {\n                        x: report.map(dat => moment(dat['date']).year()),\n                        y: report.map(dat => dat['annualTotalAssets']),\n                        type: 'bar',\n                        name: 'annualTotalAssets',\n                    },\n                ]}\n                useResizeHandler\n                style={{ width: '100%', height: '100%' }}\n                layout={{ autosize: true, legend: { \"orientation\": \"h\" }, title: 'Asset, Liability & Equity' }}\n            />\n            <RatioPlot\n                report={report}\n                title=\"Return On Assets\"\n                key1=\"annualNetIncome\"\n                name1=\"Net Income\"\n                key2=\"annualTotalAssets\"\n                name2=\"Total Assets\"\n            />\n            <RatioPlot\n                report={report}\n                title=\"Current Ratio\"\n                key1=\"annualCurrentAssets\"\n                name1=\"Current Assets\"\n                key2=\"annualCurrentLiabilities\"\n                name2=\"Current Liabilities\"\n                factor={1}\n                y2range={[0, 5]}\n            />\n            <RatioPlot\n                report={report}\n                title=\"Payout Ratio\"\n                key1=\"annualCashDividendsPaid\"\n                name1=\"Cash Dividends Paid\"\n                key2=\"annualNetIncome\"\n                name2=\"Net Income\"\n                key1factor={-1}\n            />\n        </> : <p>Loading...</p>}\n    </div>\n}\n\nexport default App;\n\nfunction RatioPlot({\n    report,\n    title,\n    key1, name1,\n    key2, name2,\n    factor = 100,\n    key1factor = 1,\n    y2range = [0, 100]\n}) {\n    const dates = report.map(dat => moment(dat['date']).year());\n\n    return <Plot\n        data={[\n            {\n                x: dates,\n                y: report.map(dat => key1factor * dat[key1]),\n                name: name1,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => dat[key2]),\n                name: name2,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => factor * key1factor * dat[key1] / dat[key2]),\n                name: title,\n                yaxis: 'y2',\n            }\n        ]}\n        useResizeHandler\n        style={{ width: '100%', height: '100%' }}\n        layout={{\n            autosize: true,\n            title,\n            yaxis2: { overlaying: 'y', side: 'right', range: y2range },\n            legend: { \"orientation\": \"h\" }\n        }}\n    />\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}