{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SYMBOLS","SYMBOLS_raw","filter","sym","includes","App","useState","symbol","setSymbol","reportBySymbol","setReportBySymbol","useEffect","fetch","then","res","text","csvString","data","d3","prevState","className","Autocomplete","options","renderInput","params","TextField","label","variant","value","onChange","_","val","RatioPlot","report","title","key1","name1","key2","name2","factor","y2range","key1factor","dates","map","dat","moment","year","x","y","name","type","yaxis","useResizeHandler","style","width","height","layout","autosize","xaxis","yaxis2","overlaying","side","range","legend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a28311d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from 'd3';\nimport Plot from 'react-plotly.js';\nimport moment from \"moment\";\nimport SYMBOLS_raw from \"./symbols.json\";\nimport { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nconst SYMBOLS = SYMBOLS_raw.filter(sym => !sym.includes(\".\"))\n\nfunction App() {\n    const [symbol, setSymbol] = useState('MSFT');\n    const [reportBySymbol, setReportBySymbol] = useState({});\n\n    useEffect(() => {\n        if (reportBySymbol[symbol]) {\n            return;\n        }\n        fetch(`reports/${symbol}.csv`)\n            .then(res => res.text())\n            .then(csvString => {\n                let data = d3.csvParse(csvString, d3.autoType);\n                setReportBySymbol(prevState => ({ ...prevState, [symbol]: data }));\n            });\n    // eslint-disable-next-line\n    }, [symbol]);\n\n    return <div className=\"container mt-3\">\n        <Autocomplete\n            className=\"mb-3\"\n            options={SYMBOLS}\n            renderInput={(params) => <TextField {...params} label=\"Symbol\" variant=\"outlined\" />}\n            value={symbol}\n            onChange={(_, val) => setSymbol(val)}\n        />\n        {reportBySymbol[symbol] ? <>\n            <RatioPlot\n                report={reportBySymbol[symbol]}\n                title=\"Profit Margin\"\n                key1=\"annualNetIncome\"\n                name1=\"Net Income\"\n                key2=\"annualTotalRevenue\"\n                name2=\"Total Revenue\"\n            />\n            <RatioPlot\n                report={reportBySymbol[symbol]}\n                title=\"Return On Assets\"\n                key1=\"annualNetIncome\"\n                name1=\"Net Income\"\n                key2=\"annualTotalAssets\"\n                name2=\"Total Assets\"\n            />\n            <RatioPlot\n                report={reportBySymbol[symbol]}\n                title=\"Current Ratio\"\n                key1=\"annualCurrentAssets\"\n                name1=\"Current Assets\"\n                key2=\"annualCurrentLiabilities\"\n                name2=\"Current Liabilities\"\n                factor={1}\n                y2range={[0, 5]}\n            />\n            <RatioPlot\n                report={reportBySymbol[symbol]}\n                title=\"Payout Ratio\"\n                key1=\"annualCashDividendsPaid\"\n                name1=\"Cash Dividends Paid\"\n                key2=\"annualNetIncome\"\n                name2=\"Net Income\"\n                key1factor={-1}\n            />\n        </> : <p>Loading...</p>}\n    </div>\n}\n\nexport default App;\n\nfunction RatioPlot({\n    report,\n    title,\n    key1, name1,\n    key2, name2,\n    factor = 100,\n    key1factor = 1,\n    y2range = [0, 100]\n}) {\n    const dates = report.map(dat => moment(dat['date']).year());\n\n    return <Plot\n        data={[\n            {\n                x: dates,\n                y: report.map(dat => key1factor * dat[key1]),\n                name: name1,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => dat[key2]),\n                name: name2,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => factor * key1factor * dat[key1] / dat[key2]),\n                name: title,\n                yaxis: 'y2',\n            }\n        ]}\n        useResizeHandler\n        style={{ width: '100%', height: '100%' }}\n        layout={{\n            autosize: true,\n            title,\n            xaxis: { type: 'date' },\n            yaxis2: { overlaying: 'y', side: 'right', range: y2range },\n            legend: { \"orientation\": \"h\" }\n        }}\n    />\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}