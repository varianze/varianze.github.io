{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ratios","profitMargin","data","map","dat","roe","currentRatio","payoutRatio","dilutedEPS","App","useState","reportBySymbol","setReportBySymbol","sortBy","setSortBy","isAscend","setIsAscend","isModalShow","setShowModal","symbol","setSymbol","sector","setSector","useEffect","getSymbols","forEach","fetch","then","res","text","csvString","d3","prevState","onSortClick","by","sortIcon","className","Dropdown","Toggle","variant","id","toUpperCase","Menu","Object","keys","SYMBOL_SECTOR","sec","Item","key","active","onClick","width","lodash","pick","sort","a","b","dataA","dataB","f","slice","length","showStockModal","mean","Modal","show","onHide","scrollable","size","Header","closeButton","Title","href","target","rel","Body","RatioPlot","report","title","key1","name1","key2","name2","factor","y2range","key1factor","dates","moment","year","x","y","name","type","yaxis","useResizeHandler","style","height","layout","autosize","yaxis2","overlaying","side","range","legend","Array","from","Set","values","result","undefined","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af55093a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from 'd3';\nimport lodash from 'lodash';\nimport { FaSortNumericDown, FaSortNumericUp, FaExternalLinkAlt } from \"react-icons/fa\";\nimport { Modal, Dropdown } from \"react-bootstrap\";\nimport Plot from 'react-plotly.js';\nimport moment from \"moment\";\nimport SYMBOL_SECTOR from \"./symbolsBySector.json\";\n\nconst profitMargin = data => data.map(dat => (dat['annualNetIncome'] / dat['annualTotalRevenue'] * 100));\nconst roe = data => data.map(dat => (dat['annualNetIncome'] / dat['annualStockholdersEquity'] * 100));\nconst currentRatio = data => data.map(dat => (dat['annualCurrentAssets'] / dat['annualCurrentLiabilities']));\nconst payoutRatio = data => data.map(dat => (-1 * dat['annualCashDividendsPaid'] / dat['annualNetIncome'] * 100));\nconst dilutedEPS = data => data.map(dat => (dat['annualDilutedEPS'] || 0));\n\nconst ratios = {\n    profitMargin,\n    roe,\n    currentRatio,\n    payoutRatio,\n    dilutedEPS,\n}\n\nfunction App() {\n    const [reportBySymbol, setReportBySymbol] = useState({});\n    const [sortBy, setSortBy] = useState('profitMargin');\n    const [isAscend, setIsAscend] = useState(false);\n    const [isModalShow, setShowModal] = useState(false);\n    const [symbol, setSymbol] = useState(null);\n    const [sector, setSector] = useState('technology');\n\n    useEffect(() => {\n        const symbols = getSymbols(sector);\n\n        symbols.forEach(symbol => {\n            if (reportBySymbol[symbol]) {\n                return;\n            }\n            fetch(`reports/${symbol}.csv`)\n                .then(res => res.text())\n                .then(csvString => {\n                    let data = d3.csvParse(csvString, d3.autoType);\n                    setReportBySymbol(prevState => ({ ...prevState, [symbol]: data }));\n                });\n        })\n        // eslint-disable-next-line\n    }, [sector]);\n\n    const onSortClick = by => {\n        if (by === sortBy) {\n            setIsAscend(!isAscend);\n        } else {\n            setSortBy(by);\n            setIsAscend(false);\n        }\n    }\n\n    const sortIcon = by => by === sortBy ?\n        isAscend ? <FaSortNumericUp /> : <FaSortNumericDown /> :\n        null;\n\n    const closeStockModal = () => {\n        setShowModal(false);\n        setSymbol(null);\n    }\n    const showStockModal = (symbol) => {\n        setShowModal(true);\n        setSymbol(symbol)\n    }\n\n    return <div className=\"container mt-3\">\n        <h3 className=\"mb-3 d-flex align-items-center\">\n            Sector: <Dropdown className=\"ml-2\">\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                    {sector.toUpperCase()}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    {Object.keys(SYMBOL_SECTOR).map(sec =>\n                        <Dropdown.Item key={sec} active={sec === sector} onClick={() => setSector(sec)}>\n                            {sec.toUpperCase()}\n                        </Dropdown.Item>\n                    )}\n                </Dropdown.Menu>\n            </Dropdown>\n        </h3>\n        <div className=\"table-responsive\">\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th width={`${100 / 6}%`}>Symbol</th>\n                        <th width={`${100 / 6}%`} onClick={() => onSortClick('profitMargin')}>Profit Margin {sortIcon('profitMargin')}</th>\n                        <th width={`${100 / 6}%`} onClick={() => onSortClick('roe')}>Return on Equity {sortIcon('roe')}</th>\n                        <th width={`${100 / 6}%`} onClick={() => onSortClick('currentRatio')}>Current Ratio {sortIcon('currentRatio')}</th>\n                        <th width={`${100 / 6}%`} onClick={() => onSortClick('payoutRatio')}>Payout Ratio {sortIcon('payoutRatio')}</th>\n                        <th width={`${100 / 6}%`} onClick={() => onSortClick('dilutedEPS')}>Duluted EPS {sortIcon('dilutedEPS')}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.keys(lodash.pick(reportBySymbol, getSymbols(sector))).sort((a, b) => {\n                        const dataA = reportBySymbol[a]\n                        const dataB = reportBySymbol[b]\n                        const f = ratios[sortBy];\n                        const sign = isAscend ? -1 : 1;\n                        return sign * (d3.mean(f(dataB)) - d3.mean(f(dataA)))\n                    }).map(symbol => {\n                        let data = reportBySymbol[symbol];\n                        data = data.slice(data.length - 5 + 1, data.length)\n                        if (data) {\n                            return <tr key={symbol}>\n                                <th><button className=\"btn btn-link btn-small p-0\" onClick={() => showStockModal(symbol)}>{symbol}</button></th>\n                                <td>{mean(ratios.profitMargin(data))}</td>\n                                <td>{mean(ratios.roe(data))}</td>\n                                <td>{mean(ratios.currentRatio(data))}</td>\n                                <td>{mean(ratios.payoutRatio(data))}</td>\n                                <td>{mean(ratios.dilutedEPS(data))}</td>\n                            </tr>\n                        } else {\n                            return <tr key={symbol}>\n                                <td>Loading..</td>\n                                <td>Loading..</td>\n                                <td>Loading..</td>\n                                <td>Loading..</td>\n                                <td>Loading..</td>\n                                <td>Loading..</td>\n                            </tr>\n                        }\n                    })}\n                </tbody>\n            </table>\n\n            {reportBySymbol[symbol] && <Modal show={isModalShow} onHide={closeStockModal} scrollable size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <a className=\"d-flex align-items-center\" href={`https://finance.yahoo.com/chart/${symbol}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                            {symbol} <FaExternalLinkAlt className=\"ml-2\"/>\n                        </a>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <RatioPlot\n                        report={reportBySymbol[symbol]}\n                        title=\"Profit Margin\"\n                        key1=\"annualNetIncome\"\n                        name1=\"Net Income\"\n                        key2=\"annualTotalRevenue\"\n                        name2=\"Total Revenue\"\n                    />\n                    <RatioPlot\n                        report={reportBySymbol[symbol]}\n                        title=\"Return On Equity\"\n                        key1=\"annualNetIncome\"\n                        name1=\"Net Income\"\n                        key2=\"annualStockholdersEquity\"\n                        name2=\"Stockholder's Equity\"\n                    />\n                    <RatioPlot\n                        report={reportBySymbol[symbol]}\n                        title=\"Current Ratio\"\n                        key1=\"annualCurrentAssets\"\n                        name1=\"Current Assets\"\n                        key2=\"annualCurrentLiabilities\"\n                        name2=\"Current Liabilities\"\n                        factor={1}\n                        y2range={[0, 5]}\n                    />\n                    <RatioPlot\n                        report={reportBySymbol[symbol]}\n                        title=\"Payout Ratio\"\n                        key1=\"annualCashDividendsPaid\"\n                        name1=\"Cash Dividends Paid\"\n                        key2=\"annualNetIncome\"\n                        name2=\"Net Income\"\n                        key1factor={-1}\n                    />\n                </Modal.Body>\n            </Modal>}\n        </div>\n    </div>\n}\n\nexport default App;\n\nfunction RatioPlot({\n    report,\n    title,\n    key1, name1,\n    key2, name2,\n    factor = 100,\n    key1factor = 1,\n    y2range = [0, 100]\n}) {\n    const dates = report.map(dat => moment(dat['date']).year());\n\n    return <Plot\n        data={[\n            {\n                x: dates,\n                y: report.map(dat => key1factor * dat[key1]),\n                name: name1,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => dat[key2]),\n                name: name2,\n                type: 'bar',\n            },\n            {\n                x: dates,\n                y: report.map(dat => factor * key1factor * dat[key1] / dat[key2]),\n                name: title,\n                yaxis: 'y2',\n            }\n        ]}\n        useResizeHandler\n        style={{ width: '100%', height: '100%' }}\n        layout={{\n            autosize: true,\n            title,\n            yaxis2: { overlaying: 'y', side: 'right', range: y2range },\n            legend: { \"orientation\": \"h\" }\n        }}\n    />\n}\n\nfunction getSymbols(sector) {\n    return Array.from(new Set(SYMBOL_SECTOR[sector]));\n}\n\nfunction mean(values) {\n    const result = d3.mean(values);\n    if (result === undefined) {\n        return 'NA';\n    }\n    return result.toFixed(1);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}